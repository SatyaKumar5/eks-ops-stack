data.aws_availability_zones.azs: Reading...
module.vpc.data.aws_availability_zones.aws_azs: Reading...
data.aws_ami.latest-ubuntu: Reading...
data.aws_vpc.selected[0]: Reading...
data.aws_caller_identity.account_details: Reading...
data.aws_caller_identity.account_details: Read complete after 1s [id=136674127410]
data.aws_availability_zones.azs: Read complete after 2s [id=us-east-1]
module.vpc.data.aws_availability_zones.aws_azs: Read complete after 2s [id=us-east-1]
data.aws_ami.latest-ubuntu: Read complete after 2s [id=ami-0778521d914d23bc1]
data.aws_vpc.selected[0]: Read complete after 3s [id=vpc-09385aecb3a5db178]

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  + create
 <= read (data resources)

Terraform will perform the following actions:

  # module.eks_cluster_and_worker_nodes.data.tls_certificate.eks will be read during apply
  # (config refers to values not yet known)
 <= data "tls_certificate" "eks" {
      + certificates = (known after apply)
      + id           = (known after apply)
      + url          = (known after apply)
    }

  # module.eks_cluster_and_worker_nodes.aws_eks_cluster.main will be created
  + resource "aws_eks_cluster" "main" {
      + arn                       = (known after apply)
      + certificate_authority     = (known after apply)
      + cluster_id                = (known after apply)
      + created_at                = (known after apply)
      + enabled_cluster_log_types = [
          + "api",
          + "audit",
          + "authenticator",
          + "controllerManager",
          + "scheduler",
        ]
      + endpoint                  = (known after apply)
      + id                        = (known after apply)
      + identity                  = (known after apply)
      + name                      = "dev"
      + platform_version          = (known after apply)
      + role_arn                  = (known after apply)
      + status                    = (known after apply)
      + tags_all                  = (known after apply)
      + version                   = "1.24"

      + kubernetes_network_config {
          + ip_family         = (known after apply)
          + service_ipv4_cidr = (known after apply)
          + service_ipv6_cidr = (known after apply)
        }

      + vpc_config {
          + cluster_security_group_id = (known after apply)
          + endpoint_private_access   = true
          + endpoint_public_access    = false
          + public_access_cidrs       = (known after apply)
          + security_group_ids        = (known after apply)
          + subnet_ids                = [
              + "subnet-0b66f353bc78e139c",
              + "subnet-0bbbc646a2edf932e",
            ]
          + vpc_id                    = (known after apply)
        }
    }

  # module.eks_cluster_and_worker_nodes.aws_eks_node_group.main[0] will be created
  + resource "aws_eks_node_group" "main" {
      + ami_type               = (known after apply)
      + arn                    = (known after apply)
      + capacity_type          = (known after apply)
      + cluster_name           = "dev"
      + disk_size              = (known after apply)
      + id                     = (known after apply)
      + instance_types         = (known after apply)
      + labels                 = {
          + "node-type" = "generic-compute"
        }
      + node_group_name        = "generic-compute"
      + node_group_name_prefix = (known after apply)
      + node_role_arn          = (known after apply)
      + release_version        = (known after apply)
      + resources              = (known after apply)
      + status                 = (known after apply)
      + subnet_ids             = [
          + "subnet-0b66f353bc78e139c",
          + "subnet-0bbbc646a2edf932e",
        ]
      + tags                   = {
          + "kubernetes.io/cluster/dev" = "owned"
          + "node-type"                 = "generic-compute"
        }
      + tags_all               = {
          + "kubernetes.io/cluster/dev" = "owned"
          + "node-type"                 = "generic-compute"
        }
      + version                = (known after apply)

      + scaling_config {
          + desired_size = 1
          + max_size     = 2
          + min_size     = 1
        }

      + update_config {
          + max_unavailable            = (known after apply)
          + max_unavailable_percentage = (known after apply)
        }
    }

  # module.eks_cluster_and_worker_nodes.aws_iam_openid_connect_provider.eks will be created
  + resource "aws_iam_openid_connect_provider" "eks" {
      + arn             = (known after apply)
      + client_id_list  = [
          + "sts.amazonaws.com",
        ]
      + id              = (known after apply)
      + tags_all        = (known after apply)
      + thumbprint_list = (known after apply)
      + url             = (known after apply)
    }

  # module.eks_cluster_and_worker_nodes.aws_iam_policy.cluster_autoscaler_policy will be created
  + resource "aws_iam_policy" "cluster_autoscaler_policy" {
      + arn         = (known after apply)
      + description = "Give the worker node running the Cluster Autoscaler access to required resources and actions"
      + id          = (known after apply)
      + name        = "dev-Cluster-Auto-Scaler"
      + path        = "/"
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action   = [
                          + "autoscaling:DescribeAutoScalingGroups",
                          + "autoscaling:DescribeAutoScalingInstances",
                          + "autoscaling:DescribeLaunchConfigurations",
                          + "autoscaling:DescribeTags",
                          + "autoscaling:SetDesiredCapacity",
                          + "autoscaling:TerminateInstanceInAutoScalingGroup",
                        ]
                      + Effect   = "Allow"
                      + Resource = "*"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + policy_id   = (known after apply)
      + tags_all    = (known after apply)
    }

  # module.eks_cluster_and_worker_nodes.aws_iam_policy.s3_access will be created
  + resource "aws_iam_policy" "s3_access" {
      + arn       = (known after apply)
      + id        = (known after apply)
      + name      = "eks_s3_access"
      + path      = "/"
      + policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action   = [
                          + "s3:ListBucket",
                        ]
                      + Effect   = "Allow"
                      + Resource = [
                          + "arn:aws:s3:::opsfleet-test-bucket",
                        ]
                    },
                  + {
                      + Action   = [
                          + "s3:GetObject",
                          + "s3:PutObject",
                        ]
                      + Effect   = "Allow"
                      + Resource = [
                          + "arn:aws:s3:::opsfleet-test-bucket/*",
                        ]
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + policy_id = (known after apply)
      + tags_all  = (known after apply)
    }

  # module.eks_cluster_and_worker_nodes.aws_iam_role.eks will be created
  + resource "aws_iam_role" "eks" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "eks.amazonaws.com"
                        }
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "eks_cluster_iam_role"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags_all              = (known after apply)
      + unique_id             = (known after apply)

      + inline_policy {
          + name   = (known after apply)
          + policy = (known after apply)
        }
    }

  # module.eks_cluster_and_worker_nodes.aws_iam_role.eks_cluster will be created
  + resource "aws_iam_role" "eks_cluster" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "eks.amazonaws.com"
                        }
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "dev-cluster-DEV"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags_all              = (known after apply)
      + unique_id             = (known after apply)

      + inline_policy {
          + name   = (known after apply)
          + policy = (known after apply)
        }
    }

  # module.eks_cluster_and_worker_nodes.aws_iam_role.eks_nodes will be created
  + resource "aws_iam_role" "eks_nodes" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "ec2.amazonaws.com"
                        }
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "eks-node-group-ops"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags_all              = (known after apply)
      + unique_id             = (known after apply)

      + inline_policy {
          + name   = (known after apply)
          + policy = (known after apply)
        }
    }

  # module.eks_cluster_and_worker_nodes.aws_iam_role_policy_attachment.aws_auto_scaling_policy will be created
  + resource "aws_iam_role_policy_attachment" "aws_auto_scaling_policy" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AutoScalingFullAccess"
      + role       = "dev-cluster-DEV"
    }

  # module.eks_cluster_and_worker_nodes.aws_iam_role_policy_attachment.aws_eks_cluster_policy will be created
  + resource "aws_iam_role_policy_attachment" "aws_eks_cluster_policy" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
      + role       = "dev-cluster-DEV"
    }

  # module.eks_cluster_and_worker_nodes.aws_iam_role_policy_attachment.aws_eks_cni_policy will be created
  + resource "aws_iam_role_policy_attachment" "aws_eks_cni_policy" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
      + role       = "eks-node-group-ops"
    }

  # module.eks_cluster_and_worker_nodes.aws_iam_role_policy_attachment.aws_eks_service_policy will be created
  + resource "aws_iam_role_policy_attachment" "aws_eks_service_policy" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEKSServicePolicy"
      + role       = "dev-cluster-DEV"
    }

  # module.eks_cluster_and_worker_nodes.aws_iam_role_policy_attachment.aws_eks_worker_node_policy will be created
  + resource "aws_iam_role_policy_attachment" "aws_eks_worker_node_policy" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
      + role       = "eks-node-group-ops"
    }

  # module.eks_cluster_and_worker_nodes.aws_iam_role_policy_attachment.aws_elastic_load_balancing_policy will be created
  + resource "aws_iam_role_policy_attachment" "aws_elastic_load_balancing_policy" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/ElasticLoadBalancingFullAccess"
      + role       = "dev-cluster-DEV"
    }

  # module.eks_cluster_and_worker_nodes.aws_iam_role_policy_attachment.cluster_autoscaler will be created
  + resource "aws_iam_role_policy_attachment" "cluster_autoscaler" {
      + id         = (known after apply)
      + policy_arn = (known after apply)
      + role       = "eks-node-group-ops"
    }

  # module.eks_cluster_and_worker_nodes.aws_iam_role_policy_attachment.ec2_read_only will be created
  + resource "aws_iam_role_policy_attachment" "ec2_read_only" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
      + role       = "eks-node-group-ops"
    }

  # module.eks_cluster_and_worker_nodes.aws_iam_role_policy_attachment.eks-AmazonEKSClusterPolicy will be created
  + resource "aws_iam_role_policy_attachment" "eks-AmazonEKSClusterPolicy" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
      + role       = "eks_cluster_iam_role"
    }

  # module.eks_cluster_and_worker_nodes.aws_iam_role_policy_attachment.eks-AmazonEKSVPCResourceController will be created
  + resource "aws_iam_role_policy_attachment" "eks-AmazonEKSVPCResourceController" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEKSVPCResourceController"
      + role       = "eks_cluster_iam_role"
    }

  # module.eks_cluster_and_worker_nodes.aws_iam_role_policy_attachment.eks_AmazonEC2ContainerRegistryReadOnly will be created
  + resource "aws_iam_role_policy_attachment" "eks_AmazonEC2ContainerRegistryReadOnly" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
      + role       = "eks-node-group-ops"
    }

  # module.eks_cluster_and_worker_nodes.aws_iam_role_policy_attachment.s3_access_attachment will be created
  + resource "aws_iam_role_policy_attachment" "s3_access_attachment" {
      + id         = (known after apply)
      + policy_arn = (known after apply)
      + role       = "eks-node-group-ops"
    }

  # module.eks_cluster_and_worker_nodes.null_resource.eks_master_sg_dependency_getter will be created
  + resource "null_resource" "eks_master_sg_dependency_getter" {
      + id = (known after apply)
    }

  # module.eks_cluster_and_worker_nodes.null_resource.eks_worker_node_groups_sg_dependency_getter will be created
  + resource "null_resource" "eks_worker_node_groups_sg_dependency_getter" {
      + id = (known after apply)
    }

  # module.jump-box.aws_instance.jump-box[0] will be created
  + resource "aws_instance" "jump-box" {
      + ami                                  = "ami-0778521d914d23bc1"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = true
      + availability_zone                    = (known after apply)
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_stop                     = (known after apply)
      + disable_api_termination              = true
      + ebs_optimized                        = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + host_resource_group_arn              = (known after apply)
      + iam_instance_profile                 = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t2.micro"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = "opsfleet-eks-worker-node-key"
      + monitoring                           = true
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + subnet_id                            = "subnet-07be1d69595fa9258"
      + tags                                 = {
          + "Name" = "opsfleet-jump-box"
        }
      + tags_all                             = {
          + "Name" = "opsfleet-jump-box"
        }
      + tenancy                              = (known after apply)
      + user_data                            = (known after apply)
      + user_data_base64                     = "IyEvYmluL2Jhc2gKc3VkbyBzZWQgLWkgLWUgInMvI1BvcnQgMjIvUG9ydCAzNzY4OS9nIiAvZXRjL3NzaC9zc2hkX2NvbmZpZwpzdWRvIHN5c3RlbWN0bCByZXN0YXJ0IHNzaGQKc3VkbyBhcHQgdXBkYXRlCnN1ZG8gYXB0IGluc3RhbGwgYXdzY2xpIC15CnN1ZG8gYXB0IGluc3RhbGwgdW56aXAKY3VybCAtTE8gImh0dHBzOi8vZGwuazhzLmlvL3JlbGVhc2UvJChjdXJsIC1MIC1zIGh0dHBzOi8vZGwuazhzLmlvL3JlbGVhc2Uvc3RhYmxlLnR4dCkvYmluL2xpbnV4L2FtZDY0L2t1YmVjdGwiCmN1cmwgLUxPICJodHRwczovL2RsLms4cy5pby8kKGN1cmwgLUwgLXMgaHR0cHM6Ly9kbC5rOHMuaW8vcmVsZWFzZS9zdGFibGUudHh0KS9iaW4vbGludXgvYW1kNjQva3ViZWN0bC5zaGEyNTYiCnN1ZG8gaW5zdGFsbCAtbyByb290IC1nIHJvb3QgLW0gMDc1NSBrdWJlY3RsIC91c3IvbG9jYWwvYmluL2t1YmVjdGwKZWNobyAiU2NyaXB0IEV4ZWN1dGVkIg=="
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)

      + capacity_reservation_specification {
          + capacity_reservation_preference = (known after apply)

          + capacity_reservation_target {
              + capacity_reservation_id                 = (known after apply)
              + capacity_reservation_resource_group_arn = (known after apply)
            }
        }

      + ebs_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + snapshot_id           = (known after apply)
          + tags                  = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }

      + enclave_options {
          + enabled = (known after apply)
        }

      + ephemeral_block_device {
          + device_name  = (known after apply)
          + no_device    = (known after apply)
          + virtual_name = (known after apply)
        }

      + maintenance_options {
          + auto_recovery = (known after apply)
        }

      + metadata_options {
          + http_endpoint               = (known after apply)
          + http_put_response_hop_limit = (known after apply)
          + http_tokens                 = (known after apply)
          + instance_metadata_tags      = (known after apply)
        }

      + network_interface {
          + delete_on_termination = (known after apply)
          + device_index          = (known after apply)
          + network_card_index    = (known after apply)
          + network_interface_id  = (known after apply)
        }

      + private_dns_name_options {
          + enable_resource_name_dns_a_record    = (known after apply)
          + enable_resource_name_dns_aaaa_record = (known after apply)
          + hostname_type                        = (known after apply)
        }

      + root_block_device {
          + delete_on_termination = true
          + device_name           = (known after apply)
          + encrypted             = true
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = 30
          + volume_type           = "gp2"
        }
    }

  # module.jump-box.null_resource.jumpbox_sg_dependency_getter will be created
  + resource "null_resource" "jumpbox_sg_dependency_getter" {
      + id = (known after apply)
    }

  # module.jump-box.null_resource.kms_key_arn_dependency_getter will be created
  + resource "null_resource" "kms_key_arn_dependency_getter" {
      + id = (known after apply)
    }

  # module.s3.aws_s3_bucket.s3_bucket[0] will be created
  + resource "aws_s3_bucket" "s3_bucket" {
      + acceleration_status         = (known after apply)
      + acl                         = "private"
      + arn                         = (known after apply)
      + bucket                      = "opsfleet-stack-s3-state-bucket"
      + bucket_domain_name          = (known after apply)
      + bucket_regional_domain_name = (known after apply)
      + force_destroy               = false
      + hosted_zone_id              = (known after apply)
      + id                          = (known after apply)
      + object_lock_enabled         = (known after apply)
      + policy                      = (known after apply)
      + region                      = (known after apply)
      + request_payer               = (known after apply)
      + tags_all                    = (known after apply)
      + website_domain              = (known after apply)
      + website_endpoint            = (known after apply)

      + cors_rule {
          + allowed_headers = (known after apply)
          + allowed_methods = (known after apply)
          + allowed_origins = (known after apply)
          + expose_headers  = (known after apply)
          + max_age_seconds = (known after apply)
        }

      + grant {
          + id          = (known after apply)
          + permissions = (known after apply)
          + type        = (known after apply)
          + uri         = (known after apply)
        }

      + lifecycle_rule {
          + abort_incomplete_multipart_upload_days = (known after apply)
          + enabled                                = (known after apply)
          + id                                     = (known after apply)
          + prefix                                 = (known after apply)
          + tags                                   = (known after apply)

          + expiration {
              + date                         = (known after apply)
              + days                         = (known after apply)
              + expired_object_delete_marker = (known after apply)
            }

          + noncurrent_version_expiration {
              + days = (known after apply)
            }

          + noncurrent_version_transition {
              + days          = (known after apply)
              + storage_class = (known after apply)
            }

          + transition {
              + date          = (known after apply)
              + days          = (known after apply)
              + storage_class = (known after apply)
            }
        }

      + logging {
          + target_bucket = (known after apply)
          + target_prefix = (known after apply)
        }

      + object_lock_configuration {
          + object_lock_enabled = (known after apply)

          + rule {
              + default_retention {
                  + days  = (known after apply)
                  + mode  = (known after apply)
                  + years = (known after apply)
                }
            }
        }

      + replication_configuration {
          + role = (known after apply)

          + rules {
              + delete_marker_replication_status = (known after apply)
              + id                               = (known after apply)
              + prefix                           = (known after apply)
              + priority                         = (known after apply)
              + status                           = (known after apply)

              + destination {
                  + account_id         = (known after apply)
                  + bucket             = (known after apply)
                  + replica_kms_key_id = (known after apply)
                  + storage_class      = (known after apply)

                  + access_control_translation {
                      + owner = (known after apply)
                    }

                  + metrics {
                      + minutes = (known after apply)
                      + status  = (known after apply)
                    }

                  + replication_time {
                      + minutes = (known after apply)
                      + status  = (known after apply)
                    }
                }

              + filter {
                  + prefix = (known after apply)
                  + tags   = (known after apply)
                }

              + source_selection_criteria {
                  + sse_kms_encrypted_objects {
                      + enabled = (known after apply)
                    }
                }
            }
        }

      + server_side_encryption_configuration {
          + rule {
              + bucket_key_enabled = (known after apply)

              + apply_server_side_encryption_by_default {
                  + kms_master_key_id = (known after apply)
                  + sse_algorithm     = (known after apply)
                }
            }
        }

      + versioning {
          + enabled    = true
          + mfa_delete = false
        }

      + website {
          + error_document           = (known after apply)
          + index_document           = (known after apply)
          + redirect_all_requests_to = (known after apply)
          + routing_rules            = (known after apply)
        }
    }

  # module.security-group.aws_security_group.eks_cluster will be created
  + resource "aws_security_group" "eks_cluster" {
      + arn                    = (known after apply)
      + description            = "Cluster communication with worker nodes"
      + egress                 = (known after apply)
      + id                     = (known after apply)
      + ingress                = (known after apply)
      + name                   = "opsfleet-eks-master-sg"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name" = "opsfleet EKS Master SG"
        }
      + tags_all               = {
          + "Name" = "opsfleet EKS Master SG"
        }
      + vpc_id                 = "vpc-09385aecb3a5db178"
    }

  # module.security-group.aws_security_group.eks_worker_node_groups_one will be created
  + resource "aws_security_group" "eks_worker_node_groups_one" {
      + arn                    = (known after apply)
      + description            = "Security group for generic compute nodes in the cluster"
      + egress                 = (known after apply)
      + id                     = (known after apply)
      + ingress                = (known after apply)
      + name                   = "opsfleet-generic-compute-sg"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name"                      = "opsfleet EKS Generic Compute Target Group SG"
          + "kubernetes.io/cluster/dev" = "owned"
        }
      + tags_all               = {
          + "Name"                      = "opsfleet EKS Generic Compute Target Group SG"
          + "kubernetes.io/cluster/dev" = "owned"
        }
      + vpc_id                 = "vpc-09385aecb3a5db178"
    }

  # module.security-group.aws_security_group.external_jumpbox_sg will be created
  + resource "aws_security_group" "external_jumpbox_sg" {
      + arn                    = (known after apply)
      + description            = "Security Group for JumpBox"
      + egress                 = (known after apply)
      + id                     = (known after apply)
      + ingress                = (known after apply)
      + name                   = "opsfleet-external-jumpbox-sg"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name" = "opsfleet External JumpBox SG"
        }
      + tags_all               = {
          + "Name" = "opsfleet External JumpBox SG"
        }
      + vpc_id                 = "vpc-09385aecb3a5db178"
    }

  # module.security-group.aws_security_group.vpce_sg will be created
  + resource "aws_security_group" "vpce_sg" {
      + arn                    = (known after apply)
      + description            = "Security Group for VPCE"
      + egress                 = (known after apply)
      + id                     = (known after apply)
      + ingress                = (known after apply)
      + name                   = "opsfleet-vpce-sg"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name" = "opsfleet Stack VPCE SG"
        }
      + tags_all               = {
          + "Name" = "opsfleet Stack VPCE SG"
        }
      + vpc_id                 = "vpc-09385aecb3a5db178"
    }

  # module.security-group.aws_security_group_rule.cluster_inbound[0] will be created
  + resource "aws_security_group_rule" "cluster_inbound" {
      + description              = "Allow External Jump Box to communicate with the Master"
      + from_port                = 443
      + id                       = (known after apply)
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + security_group_rule_id   = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 443
      + type                     = "ingress"
    }

  # module.security-group.aws_security_group_rule.cluster_inbound[1] will be created
  + resource "aws_security_group_rule" "cluster_inbound" {
      + description              = "Allow EKS Generic Compute Worker Nodes to communicate with the Master"
      + from_port                = 443
      + id                       = (known after apply)
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + security_group_rule_id   = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 443
      + type                     = "ingress"
    }

  # module.security-group.aws_security_group_rule.cluster_inbound[2] will be created
  + resource "aws_security_group_rule" "cluster_inbound" {
      + description              = "Allow EKS Generic Compute Worker Nodes to communicate with the Master"
      + from_port                = 0
      + id                       = (known after apply)
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + security_group_rule_id   = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 65535
      + type                     = "ingress"
    }

  # module.security-group.aws_security_group_rule.cluster_inbound[3] will be created
  + resource "aws_security_group_rule" "cluster_inbound" {
      + description              = "Mininum Requirement"
      + from_port                = 10250
      + id                       = (known after apply)
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + security_group_rule_id   = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 10250
      + type                     = "ingress"
    }

  # module.security-group.aws_security_group_rule.cluster_inbound[4] will be created
  + resource "aws_security_group_rule" "cluster_inbound" {
      + description              = "Mininum Requirement"
      + from_port                = 443
      + id                       = (known after apply)
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + security_group_rule_id   = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 443
      + type                     = "ingress"
    }

  # module.security-group.aws_security_group_rule.cluster_outbound[0] will be created
  + resource "aws_security_group_rule" "cluster_outbound" {
      + description              = "Minimum Requirement"
      + from_port                = 443
      + id                       = (known after apply)
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + security_group_rule_id   = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 443
      + type                     = "egress"
    }

  # module.security-group.aws_security_group_rule.cluster_outbound[1] will be created
  + resource "aws_security_group_rule" "cluster_outbound" {
      + description              = "Allow EKS Master Nodes to communicate with the EKS Generic Compute Worker Nodes"
      + from_port                = 443
      + id                       = (known after apply)
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + security_group_rule_id   = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 443
      + type                     = "egress"
    }

  # module.security-group.aws_security_group_rule.cluster_outbound[2] will be created
  + resource "aws_security_group_rule" "cluster_outbound" {
      + description              = "Allow EKS Master Nodes to communicate with the cluster API Server"
      + from_port                = 1024
      + id                       = (known after apply)
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + security_group_rule_id   = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 65535
      + type                     = "egress"
    }

  # module.security-group.aws_security_group_rule.cluster_outbound[3] will be created
  + resource "aws_security_group_rule" "cluster_outbound" {
      + description              = "Allow EKS Master Nodes to communicate with the EKS Generic Compute Worker Nodes"
      + from_port                = 1024
      + id                       = (known after apply)
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + security_group_rule_id   = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 65535
      + type                     = "egress"
    }

  # module.security-group.aws_security_group_rule.eks_worker_node_groups_one_egress_rules[0] will be created
  + resource "aws_security_group_rule" "eks_worker_node_groups_one_egress_rules" {
      + description              = "Allow Generic Compute Worker Nodes to communicate with the EKS Master Nodes"
      + from_port                = 443
      + id                       = (known after apply)
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + security_group_rule_id   = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 443
      + type                     = "egress"
    }

  # module.security-group.aws_security_group_rule.eks_worker_node_groups_one_egress_rules[1] will be created
  + resource "aws_security_group_rule" "eks_worker_node_groups_one_egress_rules" {
      + description              = "Allow Generic Compute Worker Nodes to communicate with the EKS Generic Compute Worker Nodes"
      + from_port                = 443
      + id                       = (known after apply)
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + security_group_rule_id   = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 443
      + type                     = "egress"
    }

  # module.security-group.aws_security_group_rule.eks_worker_node_groups_one_egress_rules[2] will be created
  + resource "aws_security_group_rule" "eks_worker_node_groups_one_egress_rules" {
      + description              = "Allow Generic Compute Worker Nodes to communicate with the EKS Generic Compute Worker Nodes"
      + from_port                = 8443
      + id                       = (known after apply)
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + security_group_rule_id   = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 8443
      + type                     = "egress"
    }

  # module.security-group.aws_security_group_rule.eks_worker_node_groups_one_ingress_rules[0] will be created
  + resource "aws_security_group_rule" "eks_worker_node_groups_one_ingress_rules" {
      + description              = "Recommended"
      + from_port                = 0
      + id                       = (known after apply)
      + protocol                 = "-1"
      + security_group_id        = (known after apply)
      + security_group_rule_id   = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 0
      + type                     = "ingress"
    }

  # module.security-group.aws_security_group_rule.eks_worker_node_groups_one_ingress_rules[1] will be created
  + resource "aws_security_group_rule" "eks_worker_node_groups_one_ingress_rules" {
      + description              = "Recommended"
      + from_port                = 0
      + id                       = (known after apply)
      + protocol                 = "-1"
      + security_group_id        = (known after apply)
      + security_group_rule_id   = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 0
      + type                     = "ingress"
    }

  # module.security-group.aws_security_group_rule.eks_worker_node_groups_one_ingress_rules[2] will be created
  + resource "aws_security_group_rule" "eks_worker_node_groups_one_ingress_rules" {
      + description              = "Allow Internal Jump Box to communicate with the Generic Compute Worker Nodes"
      + from_port                = 22
      + id                       = (known after apply)
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + security_group_rule_id   = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 22
      + type                     = "ingress"
    }

  # module.security-group.aws_security_group_rule.external_jump_box_cidr_egress_rules[0] will be created
  + resource "aws_security_group_rule" "external_jump_box_cidr_egress_rules" {
      + cidr_blocks              = [
          + "0.0.0.0/0",
        ]
      + description              = "Allows all the resources to talk to VPCE"
      + from_port                = 0
      + id                       = (known after apply)
      + protocol                 = "-1"
      + security_group_id        = (known after apply)
      + security_group_rule_id   = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 0
      + type                     = "egress"
    }

  # module.security-group.aws_security_group_rule.external_jumpbox_egress_rules[0] will be created
  + resource "aws_security_group_rule" "external_jumpbox_egress_rules" {
      + description              = "Allows external jumpBox to SSH into EKS Generic Compute Worker Nodes"
      + from_port                = 22
      + id                       = (known after apply)
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + security_group_rule_id   = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 22
      + type                     = "egress"
    }

  # module.security-group.aws_security_group_rule.external_jumpbox_egress_rules[1] will be created
  + resource "aws_security_group_rule" "external_jumpbox_egress_rules" {
      + description              = "Allows external jumpBox to connect to EKS"
      + from_port                = 443
      + id                       = (known after apply)
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + security_group_rule_id   = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 443
      + type                     = "egress"
    }

  # module.security-group.aws_security_group_rule.external_jumpbox_ingress_rules[0] will be created
  + resource "aws_security_group_rule" "external_jumpbox_ingress_rules" {
      + cidr_blocks              = [
          + "0.0.0.0/0",
        ]
      + description              = "Allows everyone to connect with the External JumpBox"
      + from_port                = 37689
      + id                       = (known after apply)
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + security_group_rule_id   = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 37689
      + type                     = "ingress"
    }

  # module.security-group.aws_security_group_rule.vpce_cidr_inbound[0] will be created
  + resource "aws_security_group_rule" "vpce_cidr_inbound" {
      + cidr_blocks              = [
          + "10.0.0.0/20",
        ]
      + description              = "Allows all the resources to talk to VPCE"
      + from_port                = 443
      + id                       = (known after apply)
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + security_group_rule_id   = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 443
      + type                     = "ingress"
    }

  # module.security-group.null_resource.eks_master_sg_dependency_setter will be created
  + resource "null_resource" "eks_master_sg_dependency_setter" {
      + id = (known after apply)
    }

  # module.security-group.null_resource.eks_worker_node_groups_one_sg_dependency_setter will be created
  + resource "null_resource" "eks_worker_node_groups_one_sg_dependency_setter" {
      + id = (known after apply)
    }

  # module.security-group.null_resource.jumpbox_sg_dependency_setter will be created
  + resource "null_resource" "jumpbox_sg_dependency_setter" {
      + id = (known after apply)
    }

  # module.security-group.null_resource.vpce_sg_dependency_setter will be created
  + resource "null_resource" "vpce_sg_dependency_setter" {
      + id = (known after apply)
    }

Plan: 54 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + aws_account_id = "136674127410"

Warning: Argument is deprecated

  with provider["registry.terraform.io/hashicorp/aws"],
  on main.tf line 2, in provider "aws":
   2:   shared_credentials_file = "~/.aws/credentials"

Use shared_credentials_files instead.

(and 4 more similar warnings elsewhere)

Warning: Attribute Deprecated

  with provider["registry.terraform.io/hashicorp/aws"],
  on main.tf line 2, in provider "aws":
   2:   shared_credentials_file = "~/.aws/credentials"

Use shared_credentials_files instead.

(and one more similar warning elsewhere)

Warning: Quoted references are deprecated

  on ../eks-cluster/eks_cluster.tf line 32, in resource "aws_eks_cluster" "main":
  32:     "aws_iam_role_policy_attachment.aws_eks_cluster_policy",

In this context, references are expected literally rather than in quotes. Terraform 0.11 and earlier required quotes, but
quoted references are now deprecated and will be removed in a future version of Terraform. Remove the quotes surrounding
this reference to silence this warning.

(and 6 more similar warnings elsewhere)

─────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't
guarantee to take exactly these actions if you run "terraform apply" now.
